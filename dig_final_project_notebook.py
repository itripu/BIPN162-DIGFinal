# -*- coding: utf-8 -*-
"""DIG-Final-Project-Notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qr-KkcR-hr-jktb96264ALtDDZPuhmuB

# DIG Final Project

## Team Member Names & Contributions

- **Gabriela Bulli (A16294955)**: Background; interpreting and visualizing psychometric data; future directions.
- **Deborah Chen (A16125573)**: Background; wrangling the participants data frame; wrangling the Sternberg EEG Data; results portion of discussion.
- **Isha Tripuraneni (A17046099)**: background; wrangling the resting EEG data; PCA; limitations.

## Abstract

Alzheimer's disease is a neurodegenerative disorder associated and assessed by various biomarkers and psychocognitive functions, but genetic data's effects on phenotypic differences has not been extensively studied within healthy individuals. To address whether demonstrated high risk expression of the APOE and PICALM genes could be used to understand any potential variations in cognitive function or neural activity, we utilized the PEARL-Neuro database, which contains information on genetic, health history, psychometric, and EEG data for 79 subjects aged 50-63 years old. We extracted quantifiable frequency bands from each patient's EEG data, and then ran a principal components analysis (PCA) using the genetic risk expression to compare across all metrics, individual psychometric properties, or individual EEG properties. However, despite strong covariances in certain metrics, such as the CVLT score, resting EEG power bands, and the Sternberg power bands, the PCA for each of these components overall did not reveal any meaningful clusters, indicating high genetic risk expression does not reveal any significant associations with the psychometric or EEG data.

## Research Question

Does high expression of Alzheimer’s risk genes—namely APOE and PICALM—correlate with measures of neural activity, such as EEG activity, along with any differences in cognitive function, such as memory, intelligence, mood, and personality?

# Background and Prior Work

Alzheimer’s disease (AD) is a neurodegenerative disorder with increased prevalence in elders. It is the most prevalent form of dementia, accounting for more than half of the cases. It causes cognitive decline shown by memory loss and drastic mood changes. While there isn’t a current cure for AD, much research has gone into characterizing the pathology of and risk factors for AD. Among the contributing factors to AD are genetics, epigenetics, and environment, with over 600 AD-associated genes identified (Bertram et al., 2007).   

Electroencephalography (EEG) is a common non-invasive technique that measures brain activity from the scalp (Maturana-Candelas et al., 2021). AD patients have shown significantly slower frequencies in the alpha and beta power bands, which is a possible indication of cognitive impairment (Jeong, 2004). Further, their theta band frequencies are disrupted, corresponding to rodent studies (Macedo et al., 2021). Theta oscillations generally function to support spatial memory and navigation. These power bands can be quantified using a measure known as power spectral density (PSD), which characterizes the power signal of an EEG recording of each frequency in the signal (Wang et al., 2014).

The apolipoprotein E (APOE) ɛ4 allele is one of the major AD genetic risk factors. APOE ɛ4 fragmentation leads to Amyloid-beta (Aβ) plaque formation, which plays a role in AD progression (Muñoz et al., 2019). Different brain regions all show a noticeable increase in complexity patterns recorded via EEG for individuals with APOE ɛ4 allele, which can be associated with neural degeneration (Gutiérrez-de Pablo et al., 2020). Another AD-associated factor is phosphatidylinositol binding clathrin-assembly protein (PICALM), which plays an important role in clathrin-mediated processes, including endocytosis during molecular signaling. Furthermore, PICALM risk alleles may disrupt the Aβ clearance mechanism (Ando et al., 2020). Maturana-Candelas et al. (2021) analyzed PICALM variants' effects on EEG activity and found that certain PICALM risk alleles were associated with disrupted beta power, which can describe cognitive processes that are often disrupted by Aβ plaque formation and the pathology of AD.

We will use the PEARL-Neuro database, which contains multiple data modalities. The database collected genetic, demographic and health, and psychometric data from 192 participants. In phase 2 of the experiment, they collected neuroimaging data—EEG and fMRI—and blood test data from 79 of the participants, half of which demonstrated AD susceptibility and the other half of which had neutral risk gene expression. The demographic, health, and psychometric data were self-reported questionnaires that included questions about the patient's personal information, health history, and blood tests. The information obtained related to the patient's age, sex, education, learning disabilities, body mass index (BMI), allergies, drug use, and family disease history. Genetic information relating to the APOE haplotype and PICALM rs3851179 genotype was obtained via Sanger sequencing and determined the risk gene APOE, rs429358 and rs7412, and PICALM (rs3851179). Seven psychometric tests' results were obtained from the Psychological Test Laboratory of the Polish Psychological Association. The California Verbal Learning Test (CVLT), an assessment of memory and verbal learning, asks the participants to memorize a list of words and then evaluates their recall of the words across a series of trials. The scores received for CVLT 1 were the total recall scores (Dzianok & Kublik, 2024). Patients with AD often experience impaired memory, which affects their ability to recall information. Psychometric testing can effectively test cognitive and memory processing abilities in participants, possibly differentiating between individuals with AD and those who do not suffer from AD (Delis et al., 2010).

### References (include links):

(1) Ando, K., Nagaraj, S., Küçükali, F., de Fisenne, M.-A., Kosa, A.-C., Doeraene, E., Lopez Gutierrez, L., Brion, J.-P., & Leroy, K. (2022). Picalm and Alzheimer's disease: An update and perspectives. Cells, 11(24), 3994. https://doi.org/10.3390/cells11243994

(3) Bertram, L., McQueen, M. B., Mullin, K., Blacker, D., & Tanzi, R. E. (2007). Systematic meta-analyses of Alzheimer disease genetic association studies: The AlzGene database. Nature Genetics, 39(1), 17–23. https://doi.org/10.1038/ng1934

(4) Bush, G., & Shin, L. M. (2006). The Multi-Source Interference Task: an fMRI task that reliably activates the cingulo-frontal-parietal cognitive/attention network. Nature protocols, 1(1), 308–313. https://doi.org/10.1038/nprot.2006.48

(5) Canolty, R. T., & Knight, R. T. (2010). The functional role of cross-frequency coupling. Trends in cognitive sciences, 14(11), 506–515. https://doi.org/10.1016/j.tics.2010.09.001

(6) Colgin, L. L. (2016). Rhythms of the hippocampal network. Nature Reviews Neuroscience, 17(4), 239–249. https://doi.org/10.1038/nrn.2016.21

(7) Delis, D. C., Kaplan, E., Kramer, J. H., & Ober, B. A. (2008). California verbal learning test (CVLT). United States: ECPA.

(8) Delis, D. C., Fine, E. M., Stricker, J. L., Houston, W. S., Wetter, S. R., Cobell, K., Jacobson, M. W., Salmon, D. P., & Bondi, M. W. (2010). Comparison of the traditional recall-based versus a new list-based method for computing semantic clustering on the California Verbal Learning Test: evidence from Alzheimer's disease. The Clinical neuropsychologist, 24(1), 70–79. https://doi.org/10.1080/13854040903002232

(9) Dzianok, P., & Kublik, E. (2024). Pearl-Neuro Database: EEG, fMRI, health and lifestyle data of middle-aged people at risk of dementia. Scientific Data, 11(1). https://doi.org/10.1038/s41597-024-03106-5

(10) Gutiérrez-de Pablo, V., Gómez, C., Poza, J., Maturana-Candelas, A., Martins, S., Gomes, I., Lopes, A. M., Pinto, N., & Hornero, R. (2020). Relationship between the Presence of the ApoE ε4 Allele and EEG Complexity along the Alzheimer's Disease Continuum. Sensors (Basel, Switzerland), 20(14), 3849. https://doi.org/10.3390/s20143849

(11) Jeong, J. (2004). EEG dynamics in patients with Alzheimer’s disease. Clinical Neurophysiology, 115(7), 1490–1505. https://doi.org/10.1016/j.clinph.2004.01.001

(12) Macedo, A., Gómez, C., Rebelo, M.  ., Poza, J., Gomes, I., Martins, S., Maturana-Candelas, A., Pablo, V. G., Durães, L., Sousa, P., Figueruelo, M., Rodríguez, M., Pita, C., Arenas, M., Álvarez, L., Hornero, R., Lopes, A. M., & Pinto, N. (2021). Risk Variants in Three Alzheimer’s Disease Genes Show Association with EEG Endophenotypes. Journal of Alzheimer’s Disease, 80(1), 209–223. https://doi.org/10.3233/JAD-200963

(13) Maturana-Candelas, A., Gómez, C., Poza, J., Pinto, N., & Hornero, R. (2019). EEG Characterization of the Alzheimer’s Disease Continuum by Means of Multiscale Entropies. Entropy, 21(6), 544. https://doi.org/10.3390/e21060544

(14) Maturana-Candelas, A., Gómez, C., Poza, J., Rodríguez-González, V., Pablo, V. G., Lopes, A. M., Pinto, N., & Hornero, R. (2021). Influence of PICALM and CLU risk variants on beta EEG activity in Alzheimer’s disease patients. Scientific Reports, 11(1), 20465. https://doi.org/10.1038/s41598-021-99589-y

(15) Muñoz, S. S., Garner, B., & Ooi, L. (2019). Understanding the Role of ApoE Fragments in Alzheimer's Disease. Neurochemical research, 44(6), 1297–1305. https://doi.org/10.1007/s11064-018-2629-1

(16) Wang, R., Wang, J., Yu, H., Wei, X., Yang, C., & Deng, B. (2014). Power spectral density and coherence analysis of alzheimer’s EEG. Cognitive Neurodynamics, 9(3), 291–304. https://doi.org/10.1007/s11571-014-9325-x

## Hypothesis

We hypothesize that high risk expression correlated with the APOE and PICALM genes reflects differences in each respective data modality, such as psychometrics, and the EEG data because Alzheimer's patients have demonstrated higher incidence with mood and cognitive disorders. Furthermore, individuals with the APOE gene may have lower CVLT scores because this psychometric tests are commonly correlated with cognitive function and memory. Finally, we hypothesize that the EEG data may reveal differences in expression for Alzheimer's risk genes as the literature reveals differences in characteristic frequency bands attributed to cognitive changes associated with AD.

# Setup
We need to install and import the MNE package to work with the EEG data. To download the eeg data, we need the urllibrequest package and the OS package to remove it to prevent the notebook from crashing. Finally, we will be using numpy and pandas for the majority of the data wrangling portion. We will be using the matplotlib.pyplot and seaborn package primarily for visualization. Finally, we will be using the PCA package from the sklearns module to run our primary analysis of the data.
"""

# Install the MNE package
!pip install mne

import urllib.request
import os
import mne
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.decomposition import PCA

# Load in the participants dataframe
participants_http = "https://s3.amazonaws.com/openneuro.org/ds004796/participants.tsv"
urllib.request.urlretrieve(participants_http, 'participants.tsv')

"""The dataset contains several files related to EEG data for each subject (n=79): '.eeg' which contains the EEG voltage values, '.vmrk' which are text marker files about events in the data, and '.vhdr' which are header files.

We utilized a for loop to load in the EEG data for each patient from the PEARL-Neuro database and quantify it accordingly. To load the data, we had to input the eeg, vhmrk, and the vhdr files for each of the patients. Then, from those files, we loaded it in using the MNE package and then inspected the data using the Welch's PSD plot to apply a notch filter at particularly high power frequencies (50 Hz, 150 Hz, and 250 Hz), or filter the data to only extract from frequencies under 50 Hz. Then, we converted the EEG data into an array so that we could extract the corresponding PSDs and frequencies. Using these values, we quantified the EEG data for each power band to have several indicators to benefit our analysis, which are stored in corresponding arrays. Finally, we deleted the files we loaded in during the loop to prevent the server from crashing.
"""

# Initialize arrays to contain the data from the for loop
delta_array = np.array([])
theta_array = np.array([])
alpha_array = np.array([])
beta_array = np.array([])
powerratio_array = np.array([])

# Invalid subject EEG trials (missing data), to prevent errors in the for loop
invalid_trials = ["52", "55", "69"]

for i in np.arange(80):
  # Make subject ID two digits
  subject_number = str(i+1).zfill(2)

  # HTTP baselink
  http_link = "https://s3.amazonaws.com/openneuro.org/ds004796/"
  subject_id = "sub-" + subject_number

  if subject_number not in invalid_trials:
    # EEG file downloading
    rest_eeg_filename = subject_id + "_task-rest_eeg.eeg"
    rest_eeg_http = http_link + subject_id + "/eeg/" + rest_eeg_filename
    urllib.request.urlretrieve(rest_eeg_http, rest_eeg_filename)

    # VMRK file downloading
    rest_vmrk_filename = subject_id + "_task-rest_eeg.vmrk"
    rest_vmrk_http = http_link + subject_id + "/eeg/" + rest_vmrk_filename
    urllib.request.urlretrieve(rest_vmrk_http, rest_vmrk_filename)

    # VHDR file downloading
    rest_vhdr_filename = subject_id + "_task-rest_eeg.vhdr"
    rest_vhdr_http = http_link + subject_id + "/eeg/" + rest_vhdr_filename
    urllib.request.urlretrieve(rest_vhdr_http, rest_vhdr_filename)

    # Loading the files into the notebook
    raw = mne.io.read_raw_brainvision(rest_vhdr_filename, preload=True)

    # Looking at the data—commented out to prevent multiple figures.
    # raw.compute_psd().plot()

    # Filter out specific peak frequencies to clean up the data signal a bit.
    notch_freqs=(50, 150, 250)
    raw_notch = raw.notch_filter(freqs=notch_freqs)

    # Creates an array from the raw eeg data, specified with original units
    raw_array = raw_notch.get_data(units='uV')

    # Generating a psd and associated freq array
    psds, freqs = mne.time_frequency.psd_array_welch(raw_array, sfreq=1000)

    # Averaging across channels (for a whole brain recording)
    psds_1d = np.array([])
    for i in np.arange(len(freqs)):
      psds_1d = np.append(psds_1d, psds[:, i].mean())

    # Classifying delta, theta, alpha, and beta power.
    delta = 0
    theta = 0
    alpha = 0
    beta = 0
    for i in np.arange(len(freqs)):
      # Collect the delta power
      if freqs[i] >= 0.5 and freqs[i] < 4:
        delta += psds_1d[i]
      # Collect the theta power
      elif freqs[i] >= 4 and freqs[i] < 8:
        theta += psds_1d[i]
      # Collect the alpha power
      elif freqs[i] >= 8 and freqs[i] < 13:
        alpha += psds_1d[i]
      # Collect the beta power
      elif freqs[i] >= 13 and freqs[i] < 30:
        beta += psds_1d[i]

    power_ratio = (alpha + beta) / (delta + theta)

    # Append to each of the power bands arrays, so we can collect the data into the dataframe.
    delta_array = np.append(delta_array, delta)
    theta_array = np.append(theta_array, theta)
    alpha_array = np.append(alpha_array, alpha)
    beta_array = np.append(beta_array, beta)
    powerratio_array = np.append(powerratio_array, power_ratio)

  # Subject 69 did not provide an EEG data, and has been omitted from the participants data.
  elif subject_number != "69":
    delta_array = np.append(delta_array, np.nan)
    theta_array = np.append(theta_array, np.nan)
    alpha_array = np.append(alpha_array, np.nan)
    beta_array = np.append(beta_array, np.nan)
    powerratio_array = np.append(powerratio_array, np.nan)

    # Deleting the files to prevent crashing
    os.remove(rest_eeg_filename)
    os.remove(rest_vhdr_filename)
    os.remove(rest_vmrk_filename)

"""EEG was also recorded while subjects performed the Multi-Source Interference Task (MSIT) task for cognitive processing and the Sternberg Memory Task (Bush et al., 2006). We determined that the Sternberg task (short term and working memory) would be better indication of AD onset. We will load in the Sternberg dataset to investigate if any genetic or psychometric factors correlate with or can predict memory performance.

The Sternberg task contains trials that require low or high congitive demands. Those trials were marked as S3 or S4 respectively. Therefore, we will calculate the PSDs for the two conditions independently.

### Sternberg Data Import
"""

# Initialize arrays to contain the data from the for loop
delta_array_sl = np.array([])
theta_array_sl = np.array([])
alpha_array_sl = np.array([])
beta_array_sl = np.array([])
powerratio_array_sl = np.array([])

delta_array_sh = np.array([])
theta_array_sh = np.array([])
alpha_array_sh = np.array([])
beta_array_sh = np.array([])
powerratio_array_sh = np.array([])


for i in np.arange(16, 80):
  # Make subject ID two digits
  subject_number = str(i+1).zfill(2)

  # Invalid subject EEG trials (missing data), to prevent errors in the for loop
  invalid_trials_sternberg = ["16", "17", "28", "29", "49", "50", "51", "52", "54", "55", "56", "57", "69"]

  # HTTP baselink
  http_link = "https://s3.amazonaws.com/openneuro.org/ds004796/"
  subject_id = "sub-" + subject_number

  if subject_number not in invalid_trials_sternberg:

    # EEG file downloading
    sternberg_eeg_filename = subject_id + "_task-sternberg_eeg.eeg"
    sternberg_eeg_http = http_link + subject_id + "/eeg/" + sternberg_eeg_filename
    urllib.request.urlretrieve(sternberg_eeg_http, sternberg_eeg_filename)

    # VMRK file downloading
    sternberg_vmrk_filename = subject_id + "_task-sternberg_eeg.vmrk"
    sternberg_vmrk_http = http_link + subject_id + "/eeg/" + sternberg_vmrk_filename
    urllib.request.urlretrieve(sternberg_vmrk_http, sternberg_vmrk_filename)

    # VHDR file downloading
    sternberg_vhdr_filename = subject_id + "_task-sternberg_eeg.vhdr"
    sternberg_vhdr_http = http_link + subject_id + "/eeg/" + sternberg_vhdr_filename
    urllib.request.urlretrieve(sternberg_vhdr_http, sternberg_vhdr_filename)

    # Loading the files into the notebook
    raw_sternberg = mne.io.read_raw_brainvision(sternberg_vhdr_filename, preload=True, verbose=True)

#--------begin labeling raw EEG with events----------
    # assigning the event timestamps and labels
    events, event_id = mne.events_from_annotations(raw_sternberg)

    # created epochs based on the events and ids
    epochs = mne.Epochs(
    raw_sternberg,
    events,
    event_id,
    tmax = 10, #setting the start and end time of the epoch in seconds
      # tmin is default at -0.2 s
    preload=True)

#--------(1) calculate PSD for low demand condition first--------------

    # Generating a psd and associated freq array
    epochs_low = epochs['Stimulus/S  3'].get_data(units='uV')
    psds_sl, freqs_sl = mne.time_frequency.psd_array_welch(epochs_low, fmax = 50.0, sfreq=1000)

      # Averaging across channels (for a whole brain recording)
    psds_1d = np.array([])
    for i in np.arange(len(freqs_sl)):
      psds_1d = np.append(psds_1d, psds_sl[:, i].mean())

      # Classifying delta, theta, alpha, and beta power.
    delta = 0
    theta = 0
    alpha = 0
    beta = 0
    for i in np.arange(len(freqs_sl)):
        # Collect the delta power
      if freqs_sl[i] >= 0.5 and freqs_sl[i] < 4:
        delta += psds_1d[i]
        # Collect the theta power
      elif freqs_sl[i] >= 4 and freqs_sl[i] < 8:
        theta += psds_1d[i]
        # Collect the alpha power
      elif freqs_sl[i] >= 8 and freqs_sl[i] < 13:
        alpha += psds_1d[i]
        # Collect the beta power
      elif freqs_sl[i] >= 13 and freqs_sl[i] < 30:
        beta += psds_1d[i]

    power_ratio = (alpha + beta) / (delta + theta)

    # Append to each of the power bands arrays, so we can collect the data into the dataframe.
    delta_array_sl = np.append(delta_array_sl, delta)
    theta_array_sl = np.append(theta_array_sl, theta)
    alpha_array_sl = np.append(alpha_array_sl, alpha)
    beta_array_sl = np.append(beta_array_sl, beta)
    powerratio_array_sl = np.append(powerratio_array_sl, power_ratio)


  #--------(2) repeat for high demand condition--------------
    epochs_high = epochs['Stimulus/S  4'].get_data(units='uV')
    psds_sh, freqs_sh = mne.time_frequency.psd_array_welch(epochs_high, fmax = 50.0, sfreq=1000)

      # Averaging across channels (for a whole brain recording)
    psds_1d = np.array([])
    for i in np.arange(len(freqs_sh)):
      psds_1d = np.append(psds_1d, psds_sh[:, i].mean())

      # Classifying delta, theta, alpha, and beta power.
    delta = 0
    theta = 0
    alpha = 0
    beta = 0
    for i in np.arange(len(freqs_sh)):
      if freqs_sh[i] >= 0.5 and freqs_sh[i] < 4:
        delta += psds_1d[i]
      elif freqs_sh[i] >= 4 and freqs_sh[i] < 8:
        theta += psds_1d[i]
      elif freqs_sh[i] >= 8 and freqs_sh[i] < 13:
        alpha += psds_1d[i]
      elif freqs_sh[i] >= 13 and freqs_sh[i] < 30:
        beta += psds_1d[i]

    power_ratio = (alpha + beta) / (delta + theta)

    # Append to each of the power bands arrays, so we can collect the data into the dataframe.
    delta_array_sh = np.append(delta_array_sh, delta)
    theta_array_sh = np.append(theta_array_sh, theta)
    alpha_array_sh = np.append(alpha_array_sh, alpha)
    beta_array_sh = np.append(beta_array_sh, beta)
    powerratio_array_sh = np.append(powerratio_array_sh, power_ratio)

  # Subject 69 did not provide an EEG data, and has been omitted from the participants data.
  elif subject_number != "69":
    delta_array_sl = np.append(delta_array_sl, np.nan)
    theta_array_sl = np.append(theta_array_sl, np.nan)
    alpha_array_sl = np.append(alpha_array_sl, np.nan)
    beta_array_sl = np.append(beta_array_sl, np.nan)
    powerratio_array_sl = np.append(powerratio_array_sl, np.nan)

    delta_array_sh = np.append(delta_array_sh, np.nan)
    theta_array_sh = np.append(theta_array_sh, np.nan)
    alpha_array_sh = np.append(alpha_array_sh, np.nan)
    beta_array_sh = np.append(beta_array_sh, np.nan)
    powerratio_array_sh = np.append(powerratio_array_sh, np.nan)

#------------Deleting the files to prevent crashing
  os.remove(sternberg_eeg_filename)
  os.remove(sternberg_vhdr_filename)
  os.remove(sternberg_vmrk_filename)

"""Now we can visualize the EEG power over different frequency bands with a topographic map. Below is an example of EEG power for one subject during the low and high demand portions of the Sternberg task. We visually inspected for differences in firing region and intensity. Furthermore, we visualized to see if differences in cognitive demands would reveal any differences in frequency power bands as a basis for later analysis."""

# Scalp topographic map visualization of power

# High demand condition of the Sternberg task
epochs['Stimulus/S  4'].compute_psd().plot_topomap(ch_type = 'eeg', normalize=False, contours=0)

"""**Fig 1.** (A) Topographic map of subject 80 performing the Sternberg memory during high cognitive demand condition. EEG power are divided by oscillation frequency ranges, and PSD level is illustrated with a heatmap color scale. Black dots mark the sensors placed on the scalp."""

# low demand
epochs['Stimulus/S  3'].compute_psd().plot_topomap(ch_type = 'eeg', normalize=False, contours=0)

"""**Fig 1** (B) EGG power during low demand portion is visualized the same way as above. We inspected the two images and checked for differences in firing intensity or region. We saw that the alpha band (8-12Hz) showed broader firing during low cognitive demand. There is also potential increased firing in the left hemisphere for gamma frequencies.

# Data Wrangling

We read in the participants dataframe, which contains all genetic, patient history, psychometric, and blood profile data for each patient.
"""

participants_df = pd.read_csv('participants.tsv', delimiter='\t')

# Index by the subject ID (n = 192)
participants_df = participants_df.set_index('participant_id')

participants_df.head()

"""In the participants dataset, there are 192 individuals who participated in the first phase of the trial, where all the background data was collected."""

# Full cohort: 192 healthy middle-aged (50-63) individuals.
participants_df.shape

# Inspect the columns
participants_df.columns

"""After looking at the columns, we can drop the columns relating to blood tests as we are trying to assess for any correlations with neurological function."""

# Dropping columns related to Blood tests (blood count, lipid profile, HSV virus)
participants_cleaned = participants_df.drop(columns=['leukocytes', 'erythrocytes','hemoglobin', 'hematocrit'
                              ,'MCV', 'MCH', 'MCHC', 'RDW-CV', 'platelets', 'PDW', 'MPV', 'P-LCR',
                              'neutrophils', 'lymphocytes', 'monocytes', 'eosinophils', 'basophils',
                              'neutrophils_%', 'lymphocytes_%', 'monocytes_%', 'eosinophils_%',
                              'basophils_%', 'total_cholesterol', 'cholesterol_HDL',
                              'non-HDL_cholesterol', 'LDL_cholesterol', 'triglycerides', 'HSV_r'])

participants_cleaned.head()

"""We can also drop the health information columns, as these do not pertain to our analysis of psychometrics and EEG data."""

participants_cleaned = participants_cleaned.drop(['age', 'sex', 'education',
       'learning_deficits', 'BMI', 'allergies', 'drugs', 'ibuprofen_intake',
       'thyroid_diseases', 'hypertension', 'diabetes', 'other_diseases',
       'smoking_status', 'coffee_status', 'dementia_history_parents' ], axis=1)

participants_cleaned.shape

"""Then, we subset the data into the psychometric data. We will create another subset of EEG data once it is joined with the phase 2 data."""

# (1) Subset of dataframe with psychometric data
participants_psychometric = participants_cleaned[['BDI','SES', 'RPM', 'EHI', 'NEO_NEU', 'NEO_EXT',
                                     'NEO_OPE', 'NEO_AGR','NEO_CON', 'AUDIT', 'MINI-COPE_1',
                                     'MINI-COPE_2', 'MINI-COPE_3','MINI-COPE_4', 'MINI-COPE_5',
                                     'MINI-COPE_6', 'MINI-COPE_7','MINI-COPE_8', 'MINI-COPE_9',
                                     'MINI-COPE_10', 'MINI-COPE_11','MINI-COPE_12', 'MINI-COPE_13',
                                     'MINI-COPE_14', 'CVLT_1', 'CVLT_2','CVLT_3', 'CVLT_4', 'CVLT_5',
                                     'CVLT_6', 'CVLT_7', 'CVLT_8', 'CVLT_9', 'CVLT_10', 'CVLT_11',
                                     'CVLT_12', 'CVLT_13']]
participants_psychometric.head()

"""Next, we take a look at the participants in phase 2 of the study, which only includes those that also participated in the EEG screening."""

# Creating a subset dataframe of all the Phase 2 participants
phase2_df = participants_cleaned.loc[participants_cleaned['second_phase'] == 1]
phase2_df.head()

# Some data were entered with an extra white space, so we stripped those
phase2_df['APOE_rs7412'] = phase2_df['APOE_rs7412'].str.strip()
phase2_df['PICALM_rs3851179'] = phase2_df['PICALM_rs3851179'].str.strip()

# We dropped some unnecessary columns, as second phase was used to sort the data, and session order is not relevant to our analysis.
phase2_df = phase2_df.drop(['second_phase', 'session_order'], axis=1)
phase2_df.head()

# Phase 2 cohort subgroup: 79 healthy middle-aged (50-63) individuals.
phase2_df.shape

# Add the resting EEG data into the dataframe
phase2_df = phase2_df.assign(delta_power=delta_array,
                             theta_power=theta_array,
                             alpha_power=alpha_array,
                             beta_power=beta_array,
                             EEG_power_ratio=powerratio_array)
phase2_df.head()

# Add the Sternberg EEG data (low and high demand conditions) into the dataframe
phase2_df = phase2_df.assign(delta_power_sl=delta_array_sl, #low demand
                             theta_power_sl=theta_array_sl,
                             alpha_power_sl=alpha_array_sl,
                             beta_power_sl=beta_array_sl,
                             EEG_power_ratio_sl=powerratio_array_sl)

phase2_df = phase2_df.assign(delta_power_sh=delta_array_sh, # high demand
                             theta_power_sh=theta_array_sh,
                             alpha_power_sh=alpha_array_sh,
                             beta_power_sh=beta_array_sh,
                             EEG_power_ratio_sh=powerratio_array_sh)
phase2_df.head()

# (2) Subset of EEG data
participants_eeg = phase2_df[['delta_power', 'theta_power', 'alpha_power', 'beta_power', 'EEG_power_ratio',
                              'delta_power_sl', 'theta_power_sl', 'alpha_power_sl', 'beta_power_sl', 'EEG_power_ratio_sl',
                              'delta_power_sh', 'theta_power_sh', 'alpha_power_sh', 'beta_power_sh', 'EEG_power_ratio_sh']]

participants_eeg.head()

participants_eeg.shape

"""**Description of high vs. low risk classification.** Based on the subject's genetic data (in APOE_haplotype and PICALM_rs3851179), we classified them as either high or low risk for AD. APOE_rs429358 and APOE_rs7412 interact to form the APOE alleles (e2, e3, e4), so we only looked at the haplotype and filtered for carriers of e4, the allele commonly associated with Alzheimer's. An 'A' allele in PICALM_rs3851179 is found to be protective (instead of 'G'), so we labeled subjects both expressing the APOE e4 allele and PICALM_rs3851179 G allele as high risk (Dzianok & Kublik, 2024).

After applying the risk expression sorting function, we can subsequently translate this into the other subsets by creating a new column for risk expression.
"""

# Function to apply to the risk expression column to make it easier to work with.
def risk_sorting(bool):
  '''Takes in a boolean value and returns 1 (high expression) if True, and 0 (low expression) if False.'''
  if bool:
    return 1
  else:
    return 0

# Adding the risk expression column by querying the data.
phase2_df['risk_expression'] = (phase2_df['APOE_haplotype'].str.contains('e4')) & (phase2_df['PICALM_rs3851179'].str.contains('G'))

# Using the risk sorting function so risk expression can later be included in a numeric dataset.
phase2_df['risk_expression'] = phase2_df['risk_expression'].apply(risk_sorting)
phase2_df.head()

phase2_df['risk_expression'].value_counts()

"""Next, we will keep the numerical data to run a principal components analysis (PCA) to parse any underlying correlations in the data. This step will be run for other supplementary analyses as well."""

numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
phase2_numset = phase2_df.select_dtypes(include=numerics)
phase2_numset = phase2_numset.dropna(axis=0).dropna(axis=1)

# Normalizing the data for our analysis.
phase2_norm = (phase2_numset - phase2_numset.mean())/ phase2_numset.std()

# Dropping the risk expression column, which will be added back later.
phase2_norm = phase2_norm.drop(['risk_expression'], axis=1)

phase2_norm.head()

"""## Data Analysis & Results

We are running a PCA with 3 components to first compute any potential clusters using all of the metrics, as we will be plotting the data in 2D space.
"""

# PCA for all metrics
# Import the PCA model
pca = PCA(n_components=3)

# Fit the PCA data to all of the metrics in the Data frame
phase2_pca = pca.fit_transform(phase2_norm) # Data frame

# Observe the covariance matrix, to determine which features may lead to stronger relationships
fig,ax = plt.subplots(1,1,figsize=(35,25))

phase2_cov = phase2_norm.cov()

plt.imshow(phase2_cov,cmap='RdBu', aspect='auto')
plt.colorbar()
plt.title('Fig 2. Covariance Matrix (\u03A3) for all Metrics')
tick_marks = np.arange(len(phase2_cov.columns))
plt.xticks(tick_marks, phase2_cov.columns, rotation=45)
plt.yticks(tick_marks, phase2_cov.columns)
plt.show()

"""**Fig 2. Covariance Matrix of All Metrics**

We checked for covariance across all metrics measured and calculated, consisting of the psychometric tests performed and EEG power and power ratios. Looking at the covariance matrix, we can see that there is a higher covariance within the CVLT data and the EEG data. The CVLT covaries strongly both positively and negatively within each of the lists. The resting EEG data covaries positively. The EEG power ratios of the low and high demand were positively correlated, thus overall brain oscillations during these two conditions might have been identical.  

We will take a look at the psychometrics and EEG later.
"""

# The weight of each metric for each PC.
plt.figure(figsize=(10,13))
plt.imshow(pca.components_[:3],cmap='RdBu',)
plt.yticks([0, 1, 2],['PC1','PC2', 'PC3'],fontsize=10)
plt.colorbar(orientation='horizontal')
plt.tight_layout()
plt.xticks(range(len(phase2_norm.columns)), phase2_norm.columns,rotation=65)
plt.title('Fig 3. Contribution of each Feature per Principal Component (PC)')

plt.show()

"""**Fig 3. Principal Component Contribution over 3 PCs**

We decided to attempt to cluster the metrics into 3 PCs. When looking at the first component, we see PC1 appears to have more contribution from the CVLT, which trends in a negative fashion, while PC3 captures more covariance relating to the EEG signals. PC2 did not seem to have a distinct contribution from a specific subset. Overall, however, all three components do not have much “meaningfulness” for most of the features present in the dataset.

"""

# Adding the first two components to visualize the PCA Space
phase2_numset['PC1'] = phase2_pca[:, 0]
phase2_numset['PC2'] = phase2_pca[:, 1]

phase2_numset.head()

# Projecting the data onto the PCA space
sns.lmplot(x='PC1', y='PC2', hue='risk_expression', data=phase2_numset, fit_reg=False)
plt.title('Fig 4. High (1) vs. Low (0) Risk Expression Individuals in PCA Space Using All Metrics')

plt.show()

"""**Fig 4. Clustering by High and Low Risk Across All Metrics**

We labeled the the phase 2 participants as high or low risk according to their genotype, and attempted to group them based on all the metrics. As pictured, high and low risk expression are not easily separable in PCA space. There is a lot of overlap between the high expression profiles in the low expression points, which means that all the metrics may not serve as the best representation for clustering the data in a meaningful way.
"""

# Keeping numeric data, normalizing, and dropping the risk expression column
participants_psychometric['risk_expression'] = phase2_df['risk_expression']
parpsy_numset = participants_psychometric.select_dtypes(include=numerics)
parpsy_numset = parpsy_numset.dropna(axis=0).dropna(axis=1)

parpsy_norm = parpsy_numset.drop(['risk_expression'], axis=1)
parpsy_norm = (parpsy_norm - parpsy_norm.mean())/ parpsy_norm.std()

# Initializing and running a PCA
pca = PCA(n_components=3)
parpsy_pca = pca.fit_transform(parpsy_norm)

# Add PC1 and PC2 to the data
parpsy_numset['PC1'] = parpsy_pca[:, 0]
parpsy_numset['PC2'] = parpsy_pca[:, 1]

parpsy_numset.head()

# Projecting the psychometric data onto the PCA space.
sns.lmplot(x='PC1', y='PC2', hue='risk_expression', data=parpsy_numset, fit_reg=False)
plt.title('Fig 5. High (1) vs. Low (0) Risk Expression Individuals in PCA Space Using Psychometric Features')

plt.show()

"""**Fig 5. Clustering with Psychometric Data**

Looking at the PCA space for the psychometric data, there is slightly less, or even similar, overlap in the data when compared to the PCA space for all metrics. However, the two expression types are still not clear clusters, and as such, may not prove to be a meaningful way to correlate risk expression with other aspects of AD.
"""

# PCA with only the EEG data, using the same process above.
participants_eeg['risk_expression'] = phase2_df['risk_expression']
pareeg_numset = participants_eeg.select_dtypes(include=numerics)
pareeg_numset = pareeg_numset.dropna(axis=0).dropna(axis=1)

pareeg_norm = pareeg_numset.drop(['risk_expression'], axis=1)
pareeg_norm = (pareeg_norm - pareeg_norm.mean())/ pareeg_norm.std()

# Initializing and running a PCA
pca = PCA(n_components=3)
pareeg_pca = pca.fit_transform(pareeg_norm)

# Add PC1 and PC2 to the data
pareeg_numset['PC1'] = pareeg_pca[:, 0]
pareeg_numset['PC2'] = pareeg_pca[:, 1]

pareeg_numset.head()

sns.lmplot(x='PC1', y='PC2', hue='risk_expression', data=pareeg_numset, fit_reg=False)
plt.title('Fig 6. High (1) vs. Low (0) Risk Expression Individuals in PCA Space Using EEG Features')

plt.show()

"""**Fig 6. Clustering across EEG Features**

Looking at the PCA space for the EEG data, there does not seems to be distinct clusters. The expression data also seems to have more overlap compared to the previous two plots, and considerably spread out.

Due to the PCA results, we further observed the psychometric data obtained from the California Verbal Learning Test (CVLT). More specifically, we looked at only the scores from CVLT1. CVLT 1 scores relate to total recall, which provides an overall measure of the patient's memory and verbal learning. Since the CVLT scores were not available in Phase 2, the patient IDs were obtained and separated into high-risk and low-risk groups. The CVLT scores for the high-risk and low-risk groups were then obtained using the patient IDs, and placed into a new dictionary. The CVLT 1 scores were then extracted for both the high-risk and low-risk groups.
"""

# create a for loop to get the ID from high and low risk patients
CH_data = []
CL_data = []

for idx, row in phase2_df.iterrows():
    if row['risk_expression'] == 1:
        CH_data.append(idx)
    else:
        CL_data.append(idx)

# Extract CVLT scores for high and low risk participants
CH_CVLT_scores = {}
CL_CVLT_scores = {}

for participant_id in CH_data:
  scores = participants_psychometric.loc[participant_id, ['CVLT_1', 'CVLT_2', 'CVLT_3','CVLT_4','CVLT_5','CVLT_6','CVLT_7','CVLT_8','CVLT_9','CVLT_10','CVLT_11','CVLT_12','CVLT_13']]
  CH_CVLT_scores[participant_id] = scores

for participant_id in CL_data:
  scores = participants_psychometric.loc[participant_id, ['CVLT_1', 'CVLT_2', 'CVLT_3','CVLT_4','CVLT_5','CVLT_6','CVLT_7','CVLT_8','CVLT_9','CVLT_10','CVLT_11','CVLT_12','CVLT_13']]
  CL_CVLT_scores[participant_id] = scores

# Extracting the CVLT 1 scores for high risk
CH_CVLT_1_scores = []
for participant_id, scores in CH_CVLT_scores.items():
    CH_CVLT_1_scores.append(scores['CVLT_1'])

# Extracting the CVLT 1 scores for low risk
CL_CVLT_1_scores = []
for participant_id, scores in CL_CVLT_scores.items():
    CL_CVLT_1_scores.append(scores['CVLT_1'])

"""Once the scores were extracted, a boxplot was used to visualize and observe variability between the scores of the high-risk group and the low-risk groups. The data was then checked for skewness and a Mann Whitney U Test was performed.

"""

# Plotting boxplots of each CVLT Scores to observe the variablity between high and low risk.
fig, ax = plt.subplots(1,1,figsize=(7,7))

CVLT1_data = [CH_CVLT_1_scores, CL_CVLT_1_scores]
ax.boxplot(CVLT1_data)

ax.set_ylabel('CVLT 1 Scores')
ax.set_xticklabels(['High Risk', 'Low Risk'])
ax.set_title('Fig 7. Boxplot of High vs Low Risk Groups CVLT 1 Scores')

plt.show()

"""**Fig 7. Boxplot Comparsion of High and Low Risk Groups' CVLT Scores**

We visually examined for any differences in the CVLT score distribution between high and low risk groups. There does not seem to be any significant difference, as the means and distributions look to be similar.
"""

#Seeing if the data is skewed
skew_CH = stats.skew(CH_CVLT_1_scores)
skew_CL = stats.skew(CL_CVLT_1_scores)

#print statement to see values
print(skew_CH)
print(skew_CL)

# both values are < 0 and therefore are left skewed so a Mann Whitney U Test will be used
stats.mannwhitneyu(CH_CVLT_1_scores, CL_CVLT_1_scores)

"""Upon analysing the score distribution using the Mann Whitney U Test, we see that the two risk groups does not differ significantly on the basis of their CVLT scores. We ran the test with the significance value p=0.05, and the calculated p-value was above the threshold (p=0.88).

# Conclusion & Discussion

**Covariance Matrices showed positive correlations across EEG frequency bands**

Covariance was evaluated across results from all trials of psychometric tests and mean power from EEG frequency bands. Of all the tests performed, the California Verbal Learning Test (CVLT) scores across 13 trials covaried strongly with each other. CVLT is a commonly used test for active learning and recall (Delis et al., 1987). We observed that earlier trials tended to covary together while later trials covaried in opposite directions. This is expected as earlier trials assess learning and later ones assess retrieval. Despite this correlation, we did not find another further connection between CVLT scores and AD risk genes' expression. Thus we cannot say that high expression of AD risk alleles is associated with CVLT scores. We also checked the EEG oscillation bands’ covariance with each other and with other metrics.  Brain oscillations are known to support cognitive processing across brain regions, and can be categorized based on the frequency range they occur at (Colgin, 2016). For our analysis, we filtered for 4 different oscillations (delta: 0.5-4 Hz, theta: 4-8 Hz, alpha: 8-13Hz, beta: 13-30Hz ) and calculated their mean PSD. A phenomenon called cross-frequency coupling (CFC) describes the interaction between oscillations, where the oscillation phase of one frequency may be linked to the amplitude or power of another (Canolty and Knight, 2010). This interaction has been hypothesized to carry information across brain regions and serve an important role in learning. Our resting EEG power across the 4 frequencies covaried strongly and positively with each other, corroborating with the CFC’s role in typical brain functioning. Within EEG data during the Sternberg task, unlike our background and hypothesis, the high-demand portion did not produce significantly different alpha and beta power bands. In combination with the EEG power ratio being positively co-varied between the low and high demand, we can conclude that the different cognitive/memory demands may not be strong indicators for cognitive decline.


**PCA across several different metrics did not yield meaningful clusters**

PCA was performed across all metrics (with both psychometric and EEG values), just EEG power bands, or only psychometric tests. Despite some covariance within metrics, we saw that none had well-separated PCs based on high and low-risk labels. This suggests that resting state EEG and cognitive performance in people aged 50-63 might not correlate with AD risk. Another explanation would be that, since we only considered genetic information, the high and low-risk labels we created were not representative of actual AD risk. We attempted PCA with more PCs but saw similar distributions. Overall, we did not find strong correlations between the high expression of AD risk genes, psychometric results, and EEG power.  


**Limitations**

One major factor limiting the extent of our analysis was the complexity of the EEG data. As the EEG signal is composed of characteristic waves, the quantifiable data extracted from the raw signal did not fully capture the complexity of the data. Thus, our analysis may not have fully captured any correlations with the risk genes. There are also limitations in the dataset itself. The data gathered diagnostic information about healthy patients who demonstrated risk expression. As such, differences in mood, cognitive function, and the EEG may not have been captured or could have been subtle as they may not demonstrate AD symptoms. Furthermore, the dataset did not measure the key biomarkers of AD, including phosphorylated Tau and the Aβ plaque formation. Thus, there are no direct measures that may indicate AD when assessed with psychometric and EEG data,

Furthermore, the dataset only includes Polish individuals, which means it does not represent the true population of individuals with AD. Thus, there may be confounding variables related to the demographic data, or skewness in the data because we are selecting for one group of people.

In future experiments, the data acquisition methods and the recorded parameters will be modified.  Because the demographic, health, and psychometric data were all self-reported, there is a potential for inaccurate information. In future experiments, these questionnaires will be conducted with a healthcare professional in a private setting to obtain the most accurate and unbiased results.  In addition, testing would be conducted initially at the beginning of the experiment to ensure a more precise screening of the APOE and PICALM genes.  Moreover, more testing will be done to include a more extensive variety of biomarkers associated with AD to further the experimentation on the correlation between different biomarkers and their association with AD. Furthermore, in future experiments, EEG data will be taken while patients with specific biomarkers perform cognitive tasks to see whether or not the frequencies vary between the biomarker groups. Lastly, the data results above will be observed as time progresses, and the correlation between whether Alzheimer's symptoms appear and/or progress will be observed.

# Reflection

​​**Isha** To reflect on our project, we implemented a couple of changes from the proposal including limiting the scope of our analysis to 3 data modalities by cutting out fMRI. We tried to include a way of running a classification model with our data, but we were unable to do so because the sample size was too small, and thus, the training set would have the same inputs, which didn't allow us to do logistic regression. The project went somewhat smoothly, with us being able to run most of the PCA as we intended.  What we found rewarding was visualizing and quantifying parts of the EEG data. What we found difficult was working with the EEG data, as well as interpreting the different PCAs we ran, as they were inconclusive and did not reveal any meaningful clusters that we hoped we could see.


**Deborah** While working with the EEG data, we were unable to foresee the issues we would encounter when working with it, which may have hindered our ability to do the analysis. A difficulty I encountered was loading in and preprocessing the sternberg EGG datast. I was able to resolve it by troubleshooting each step.


**Gabby** This project was a difficult but rewarding experience. We benefited greatly from the planning stage and from discussing the datasets available to us. Using the feedback provided, we modified aspects such as the background and data modalities to convey the goal of our experiment more clearly. One difficulty I  encountered was trying to access the CVLT scores through the phase 2 data. I was able to sort out this issue with the help of previous class notes and I was then able to visualize the data.
"""